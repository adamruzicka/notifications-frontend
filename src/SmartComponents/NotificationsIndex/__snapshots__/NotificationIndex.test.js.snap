// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NotificationsIndex expect to render an EmptyState by default (with no endpoints) 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NotificationsIndex
    deleteEndpoint={[MockFunction]}
    endpoints={Array []}
    fetchEndpoints={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
            10,
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    fetchFilters={[MockFunction]}
    filters={Array []}
    newEndpoint={[MockFunction]}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    toggleEndpoint={[MockFunction]}
    total={0}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <LoadingState
        placeholder={
          <Skeleton
            size="lg"
          />
        }
      >
        <Bullseye
          className=""
          component="div"
        >
          <EmptyState
            className=""
          >
            <p>
              <EmptyStateIcon
                className=""
                icon={[Function]}
              />
            </p>
            <Title
              className=""
              headingLevel="h1"
              size="lg"
            >
              No Endpoins found
            </Title>
            <EmptyStateBody
              className=""
            >
              There are no endpoints configured yet.
            </EmptyStateBody>
            <Button
              aria-label={null}
              className=""
              component={[Function]}
              isActive={false}
              isBlock={false}
              isDisabled={false}
              isFocus={false}
              isHover={false}
              onClick={[MockFunction]}
              to="/new"
              type="button"
              variant="primary"
            >
              New endpoint
            </Button>
          </EmptyState>
        </Bullseye>
      </LoadingState>,
      "rightBar": <IndexToolbar
        onClick={[MockFunction]}
      />,
      "title": "Notifications",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Bullseye
          className=""
          component="div"
        >
          <EmptyState
            className=""
          >
            <p>
              <EmptyStateIcon
                className=""
                icon={[Function]}
              />
            </p>
            <Title
              className=""
              headingLevel="h1"
              size="lg"
            >
              No Endpoins found
            </Title>
            <EmptyStateBody
              className=""
            >
              There are no endpoints configured yet.
            </EmptyStateBody>
            <Button
              aria-label={null}
              className=""
              component={[Function]}
              isActive={false}
              isBlock={false}
              isDisabled={false}
              isFocus={false}
              isHover={false}
              onClick={[MockFunction]}
              to="/new"
              type="button"
              variant="primary"
            >
              New endpoint
            </Button>
          </EmptyState>
        </Bullseye>,
        "loading": undefined,
        "placeholder": <Skeleton
          size="lg"
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <EmptyState
            className=""
          >
            <p>
              <EmptyStateIcon
                className=""
                icon={[Function]}
              />
            </p>
            <Title
              className=""
              headingLevel="h1"
              size="lg"
            >
              No Endpoins found
            </Title>
            <EmptyStateBody
              className=""
            >
              There are no endpoints configured yet.
            </EmptyStateBody>
            <Button
              aria-label={null}
              className=""
              component={[Function]}
              isActive={false}
              isBlock={false}
              isDisabled={false}
              isFocus={false}
              isHover={false}
              onClick={[MockFunction]}
              to="/new"
              type="button"
              variant="primary"
            >
              New endpoint
            </Button>
          </EmptyState>,
          "className": "",
          "component": "div",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <p>
                <EmptyStateIcon
                  className=""
                  icon={[Function]}
                />
              </p>,
              <Title
                className=""
                headingLevel="h1"
                size="lg"
              >
                No Endpoins found
              </Title>,
              <EmptyStateBody
                className=""
              >
                There are no endpoints configured yet.
              </EmptyStateBody>,
              <Button
                aria-label={null}
                className=""
                component={[Function]}
                isActive={false}
                isBlock={false}
                isDisabled={false}
                isFocus={false}
                isHover={false}
                onClick={[MockFunction]}
                to="/new"
                type="button"
                variant="primary"
              >
                New endpoint
              </Button>,
            ],
            "className": "",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <EmptyStateIcon
                  className=""
                  icon={[Function]}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "icon": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "No Endpoins found",
                "className": "",
                "headingLevel": "h1",
                "size": "lg",
              },
              "ref": null,
              "rendered": "No Endpoins found",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "There are no endpoints configured yet.",
                "className": "",
              },
              "ref": null,
              "rendered": "There are no endpoints configured yet.",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "aria-label": null,
                "children": "New endpoint",
                "className": "",
                "component": [Function],
                "isActive": false,
                "isBlock": false,
                "isDisabled": false,
                "isFocus": false,
                "isHover": false,
                "onClick": [MockFunction],
                "to": "/new",
                "type": "button",
                "variant": "primary",
              },
              "ref": null,
              "rendered": "New endpoint",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <LoadingState
          placeholder={
            <Skeleton
              size="lg"
            />
          }
        >
          <Bullseye
            className=""
            component="div"
          >
            <EmptyState
              className=""
            >
              <p>
                <EmptyStateIcon
                  className=""
                  icon={[Function]}
                />
              </p>
              <Title
                className=""
                headingLevel="h1"
                size="lg"
              >
                No Endpoins found
              </Title>
              <EmptyStateBody
                className=""
              >
                There are no endpoints configured yet.
              </EmptyStateBody>
              <Button
                aria-label={null}
                className=""
                component={[Function]}
                isActive={false}
                isBlock={false}
                isDisabled={false}
                isFocus={false}
                isHover={false}
                onClick={[MockFunction]}
                to="/new"
                type="button"
                variant="primary"
              >
                New endpoint
              </Button>
            </EmptyState>
          </Bullseye>
        </LoadingState>,
        "rightBar": <IndexToolbar
          onClick={[MockFunction]}
        />,
        "title": "Notifications",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Bullseye
            className=""
            component="div"
          >
            <EmptyState
              className=""
            >
              <p>
                <EmptyStateIcon
                  className=""
                  icon={[Function]}
                />
              </p>
              <Title
                className=""
                headingLevel="h1"
                size="lg"
              >
                No Endpoins found
              </Title>
              <EmptyStateBody
                className=""
              >
                There are no endpoints configured yet.
              </EmptyStateBody>
              <Button
                aria-label={null}
                className=""
                component={[Function]}
                isActive={false}
                isBlock={false}
                isDisabled={false}
                isFocus={false}
                isHover={false}
                onClick={[MockFunction]}
                to="/new"
                type="button"
                variant="primary"
              >
                New endpoint
              </Button>
            </EmptyState>
          </Bullseye>,
          "loading": undefined,
          "placeholder": <Skeleton
            size="lg"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <EmptyState
              className=""
            >
              <p>
                <EmptyStateIcon
                  className=""
                  icon={[Function]}
                />
              </p>
              <Title
                className=""
                headingLevel="h1"
                size="lg"
              >
                No Endpoins found
              </Title>
              <EmptyStateBody
                className=""
              >
                There are no endpoints configured yet.
              </EmptyStateBody>
              <Button
                aria-label={null}
                className=""
                component={[Function]}
                isActive={false}
                isBlock={false}
                isDisabled={false}
                isFocus={false}
                isHover={false}
                onClick={[MockFunction]}
                to="/new"
                type="button"
                variant="primary"
              >
                New endpoint
              </Button>
            </EmptyState>,
            "className": "",
            "component": "div",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <p>
                  <EmptyStateIcon
                    className=""
                    icon={[Function]}
                  />
                </p>,
                <Title
                  className=""
                  headingLevel="h1"
                  size="lg"
                >
                  No Endpoins found
                </Title>,
                <EmptyStateBody
                  className=""
                >
                  There are no endpoints configured yet.
                </EmptyStateBody>,
                <Button
                  aria-label={null}
                  className=""
                  component={[Function]}
                  isActive={false}
                  isBlock={false}
                  isDisabled={false}
                  isFocus={false}
                  isHover={false}
                  onClick={[MockFunction]}
                  to="/new"
                  type="button"
                  variant="primary"
                >
                  New endpoint
                </Button>,
              ],
              "className": "",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <EmptyStateIcon
                    className=""
                    icon={[Function]}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "",
                    "icon": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "No Endpoins found",
                  "className": "",
                  "headingLevel": "h1",
                  "size": "lg",
                },
                "ref": null,
                "rendered": "No Endpoins found",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "There are no endpoints configured yet.",
                  "className": "",
                },
                "ref": null,
                "rendered": "There are no endpoints configured yet.",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "aria-label": null,
                  "children": "New endpoint",
                  "className": "",
                  "component": [Function],
                  "isActive": false,
                  "isBlock": false,
                  "isDisabled": false,
                  "isFocus": false,
                  "isHover": false,
                  "onClick": [MockFunction],
                  "to": "/new",
                  "type": "button",
                  "variant": "primary",
                },
                "ref": null,
                "rendered": "New endpoint",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`NotificationsIndex takes endpoints 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NotificationsIndex
    deleteEndpoint={[MockFunction]}
    endpoints={
      Array [
        Object {
          "active": true,
          "filtersCount": 2,
          "id": 1,
          "name": "TEST Endpoint #1",
          "url": "http://endpoint.com",
        },
        Object {
          "active": true,
          "filtersCount": 1,
          "id": 2,
          "name": "TEST Endpoint #2",
          "url": "http://endpoint2.com",
        },
        Object {
          "active": false,
          "filtersCount": 4,
          "id": 3,
          "name": "TEST Endpoint #3",
          "url": "http://endpoint3.com",
        },
      ]
    }
    fetchEndpoints={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
            10,
          ],
          Array [
            1,
            10,
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    fetchFilters={[MockFunction]}
    filters={Array []}
    newEndpoint={[MockFunction]}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    toggleEndpoint={[MockFunction]}
    total={0}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <LoadingState
        placeholder={
          <Skeleton
            size="lg"
          />
        }
      >
        <div>
          <Table
            aria-label="Notifications list"
            header={
              Array [
                "Name",
                "Type",
                "Path",
                "Status",
                "Active",
                "",
              ]
            }
            rows={
              Array [
                Object {
                  "cells": Array [
                    "TEST Endpoint #1",
                    "http://endpoint.com",
                    "HTTP",
                    <StatusIcon
                      status={true}
                    />,
                    <EndpointToggle
                      active={true}
                      id={1}
                      onChange={[Function]}
                    />,
                    <withRouter(NotificationActions)
                      endpointId={1}
                      onDelete={[Function]}
                    />,
                  ],
                },
                Object {
                  "cells": Array [
                    "TEST Endpoint #2",
                    "http://endpoint2.com",
                    "HTTP",
                    <StatusIcon
                      status={true}
                    />,
                    <EndpointToggle
                      active={true}
                      id={2}
                      onChange={[Function]}
                    />,
                    <withRouter(NotificationActions)
                      endpointId={2}
                      onDelete={[Function]}
                    />,
                  ],
                },
                Object {
                  "cells": Array [
                    "TEST Endpoint #3",
                    "http://endpoint3.com",
                    "HTTP",
                    <StatusIcon
                      status={true}
                    />,
                    <EndpointToggle
                      active={false}
                      id={3}
                      onChange={[Function]}
                    />,
                    <withRouter(NotificationActions)
                      endpointId={3}
                      onDelete={[Function]}
                    />,
                  ],
                },
              ]
            }
          >
            <TableHeader />
            <TableBody />
          </Table>
          <Pagination
            itemsPerPage={10}
            numberOfItems={0}
            onPerPageSelect={[Function]}
            onSetPage={[Function]}
            page={1}
            useNext={true}
          />
        </div>
      </LoadingState>,
      "rightBar": <IndexToolbar
        onClick={[MockFunction]}
      />,
      "title": "Notifications",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <div>
          <Table
            aria-label="Notifications list"
            header={
              Array [
                "Name",
                "Type",
                "Path",
                "Status",
                "Active",
                "",
              ]
            }
            rows={
              Array [
                Object {
                  "cells": Array [
                    "TEST Endpoint #1",
                    "http://endpoint.com",
                    "HTTP",
                    <StatusIcon
                      status={true}
                    />,
                    <EndpointToggle
                      active={true}
                      id={1}
                      onChange={[Function]}
                    />,
                    <withRouter(NotificationActions)
                      endpointId={1}
                      onDelete={[Function]}
                    />,
                  ],
                },
                Object {
                  "cells": Array [
                    "TEST Endpoint #2",
                    "http://endpoint2.com",
                    "HTTP",
                    <StatusIcon
                      status={true}
                    />,
                    <EndpointToggle
                      active={true}
                      id={2}
                      onChange={[Function]}
                    />,
                    <withRouter(NotificationActions)
                      endpointId={2}
                      onDelete={[Function]}
                    />,
                  ],
                },
                Object {
                  "cells": Array [
                    "TEST Endpoint #3",
                    "http://endpoint3.com",
                    "HTTP",
                    <StatusIcon
                      status={true}
                    />,
                    <EndpointToggle
                      active={false}
                      id={3}
                      onChange={[Function]}
                    />,
                    <withRouter(NotificationActions)
                      endpointId={3}
                      onDelete={[Function]}
                    />,
                  ],
                },
              ]
            }
          >
            <TableHeader />
            <TableBody />
          </Table>
          <Pagination
            itemsPerPage={10}
            numberOfItems={0}
            onPerPageSelect={[Function]}
            onSetPage={[Function]}
            page={1}
            useNext={true}
          />
        </div>,
        "loading": undefined,
        "placeholder": <Skeleton
          size="lg"
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Table
              aria-label="Notifications list"
              header={
                Array [
                  "Name",
                  "Type",
                  "Path",
                  "Status",
                  "Active",
                  "",
                ]
              }
              rows={
                Array [
                  Object {
                    "cells": Array [
                      "TEST Endpoint #1",
                      "http://endpoint.com",
                      "HTTP",
                      <StatusIcon
                        status={true}
                      />,
                      <EndpointToggle
                        active={true}
                        id={1}
                        onChange={[Function]}
                      />,
                      <withRouter(NotificationActions)
                        endpointId={1}
                        onDelete={[Function]}
                      />,
                    ],
                  },
                  Object {
                    "cells": Array [
                      "TEST Endpoint #2",
                      "http://endpoint2.com",
                      "HTTP",
                      <StatusIcon
                        status={true}
                      />,
                      <EndpointToggle
                        active={true}
                        id={2}
                        onChange={[Function]}
                      />,
                      <withRouter(NotificationActions)
                        endpointId={2}
                        onDelete={[Function]}
                      />,
                    ],
                  },
                  Object {
                    "cells": Array [
                      "TEST Endpoint #3",
                      "http://endpoint3.com",
                      "HTTP",
                      <StatusIcon
                        status={true}
                      />,
                      <EndpointToggle
                        active={false}
                        id={3}
                        onChange={[Function]}
                      />,
                      <withRouter(NotificationActions)
                        endpointId={3}
                        onDelete={[Function]}
                      />,
                    ],
                  },
                ]
              }
            >
              <TableHeader />
              <TableBody />
            </Table>,
            <Pagination
              itemsPerPage={10}
              numberOfItems={0}
              onPerPageSelect={[Function]}
              onSetPage={[Function]}
              page={1}
              useNext={true}
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "aria-label": "Notifications list",
              "children": Array [
                <TableHeader />,
                <TableBody />,
              ],
              "header": Array [
                "Name",
                "Type",
                "Path",
                "Status",
                "Active",
                "",
              ],
              "rows": Array [
                Object {
                  "cells": Array [
                    "TEST Endpoint #1",
                    "http://endpoint.com",
                    "HTTP",
                    <StatusIcon
                      status={true}
                    />,
                    <EndpointToggle
                      active={true}
                      id={1}
                      onChange={[Function]}
                    />,
                    <withRouter(NotificationActions)
                      endpointId={1}
                      onDelete={[Function]}
                    />,
                  ],
                },
                Object {
                  "cells": Array [
                    "TEST Endpoint #2",
                    "http://endpoint2.com",
                    "HTTP",
                    <StatusIcon
                      status={true}
                    />,
                    <EndpointToggle
                      active={true}
                      id={2}
                      onChange={[Function]}
                    />,
                    <withRouter(NotificationActions)
                      endpointId={2}
                      onDelete={[Function]}
                    />,
                  ],
                },
                Object {
                  "cells": Array [
                    "TEST Endpoint #3",
                    "http://endpoint3.com",
                    "HTTP",
                    <StatusIcon
                      status={true}
                    />,
                    <EndpointToggle
                      active={false}
                      id={3}
                      onChange={[Function]}
                    />,
                    <withRouter(NotificationActions)
                      endpointId={3}
                      onDelete={[Function]}
                    />,
                  ],
                },
              ],
              "variant": undefined,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "itemsPerPage": 10,
              "numberOfItems": 0,
              "onPerPageSelect": [Function],
              "onSetPage": [Function],
              "page": 1,
              "useNext": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <LoadingState
          placeholder={
            <Skeleton
              size="lg"
            />
          }
        >
          <div>
            <Table
              aria-label="Notifications list"
              header={
                Array [
                  "Name",
                  "Type",
                  "Path",
                  "Status",
                  "Active",
                  "",
                ]
              }
              rows={
                Array [
                  Object {
                    "cells": Array [
                      "TEST Endpoint #1",
                      "http://endpoint.com",
                      "HTTP",
                      <StatusIcon
                        status={true}
                      />,
                      <EndpointToggle
                        active={true}
                        id={1}
                        onChange={[Function]}
                      />,
                      <withRouter(NotificationActions)
                        endpointId={1}
                        onDelete={[Function]}
                      />,
                    ],
                  },
                  Object {
                    "cells": Array [
                      "TEST Endpoint #2",
                      "http://endpoint2.com",
                      "HTTP",
                      <StatusIcon
                        status={true}
                      />,
                      <EndpointToggle
                        active={true}
                        id={2}
                        onChange={[Function]}
                      />,
                      <withRouter(NotificationActions)
                        endpointId={2}
                        onDelete={[Function]}
                      />,
                    ],
                  },
                  Object {
                    "cells": Array [
                      "TEST Endpoint #3",
                      "http://endpoint3.com",
                      "HTTP",
                      <StatusIcon
                        status={true}
                      />,
                      <EndpointToggle
                        active={false}
                        id={3}
                        onChange={[Function]}
                      />,
                      <withRouter(NotificationActions)
                        endpointId={3}
                        onDelete={[Function]}
                      />,
                    ],
                  },
                ]
              }
            >
              <TableHeader />
              <TableBody />
            </Table>
            <Pagination
              itemsPerPage={10}
              numberOfItems={0}
              onPerPageSelect={[Function]}
              onSetPage={[Function]}
              page={1}
              useNext={true}
            />
          </div>
        </LoadingState>,
        "rightBar": <IndexToolbar
          onClick={[MockFunction]}
        />,
        "title": "Notifications",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <div>
            <Table
              aria-label="Notifications list"
              header={
                Array [
                  "Name",
                  "Type",
                  "Path",
                  "Status",
                  "Active",
                  "",
                ]
              }
              rows={
                Array [
                  Object {
                    "cells": Array [
                      "TEST Endpoint #1",
                      "http://endpoint.com",
                      "HTTP",
                      <StatusIcon
                        status={true}
                      />,
                      <EndpointToggle
                        active={true}
                        id={1}
                        onChange={[Function]}
                      />,
                      <withRouter(NotificationActions)
                        endpointId={1}
                        onDelete={[Function]}
                      />,
                    ],
                  },
                  Object {
                    "cells": Array [
                      "TEST Endpoint #2",
                      "http://endpoint2.com",
                      "HTTP",
                      <StatusIcon
                        status={true}
                      />,
                      <EndpointToggle
                        active={true}
                        id={2}
                        onChange={[Function]}
                      />,
                      <withRouter(NotificationActions)
                        endpointId={2}
                        onDelete={[Function]}
                      />,
                    ],
                  },
                  Object {
                    "cells": Array [
                      "TEST Endpoint #3",
                      "http://endpoint3.com",
                      "HTTP",
                      <StatusIcon
                        status={true}
                      />,
                      <EndpointToggle
                        active={false}
                        id={3}
                        onChange={[Function]}
                      />,
                      <withRouter(NotificationActions)
                        endpointId={3}
                        onDelete={[Function]}
                      />,
                    ],
                  },
                ]
              }
            >
              <TableHeader />
              <TableBody />
            </Table>
            <Pagination
              itemsPerPage={10}
              numberOfItems={0}
              onPerPageSelect={[Function]}
              onSetPage={[Function]}
              page={1}
              useNext={true}
            />
          </div>,
          "loading": undefined,
          "placeholder": <Skeleton
            size="lg"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Table
                aria-label="Notifications list"
                header={
                  Array [
                    "Name",
                    "Type",
                    "Path",
                    "Status",
                    "Active",
                    "",
                  ]
                }
                rows={
                  Array [
                    Object {
                      "cells": Array [
                        "TEST Endpoint #1",
                        "http://endpoint.com",
                        "HTTP",
                        <StatusIcon
                          status={true}
                        />,
                        <EndpointToggle
                          active={true}
                          id={1}
                          onChange={[Function]}
                        />,
                        <withRouter(NotificationActions)
                          endpointId={1}
                          onDelete={[Function]}
                        />,
                      ],
                    },
                    Object {
                      "cells": Array [
                        "TEST Endpoint #2",
                        "http://endpoint2.com",
                        "HTTP",
                        <StatusIcon
                          status={true}
                        />,
                        <EndpointToggle
                          active={true}
                          id={2}
                          onChange={[Function]}
                        />,
                        <withRouter(NotificationActions)
                          endpointId={2}
                          onDelete={[Function]}
                        />,
                      ],
                    },
                    Object {
                      "cells": Array [
                        "TEST Endpoint #3",
                        "http://endpoint3.com",
                        "HTTP",
                        <StatusIcon
                          status={true}
                        />,
                        <EndpointToggle
                          active={false}
                          id={3}
                          onChange={[Function]}
                        />,
                        <withRouter(NotificationActions)
                          endpointId={3}
                          onDelete={[Function]}
                        />,
                      ],
                    },
                  ]
                }
              >
                <TableHeader />
                <TableBody />
              </Table>,
              <Pagination
                itemsPerPage={10}
                numberOfItems={0}
                onPerPageSelect={[Function]}
                onSetPage={[Function]}
                page={1}
                useNext={true}
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "aria-label": "Notifications list",
                "children": Array [
                  <TableHeader />,
                  <TableBody />,
                ],
                "header": Array [
                  "Name",
                  "Type",
                  "Path",
                  "Status",
                  "Active",
                  "",
                ],
                "rows": Array [
                  Object {
                    "cells": Array [
                      "TEST Endpoint #1",
                      "http://endpoint.com",
                      "HTTP",
                      <StatusIcon
                        status={true}
                      />,
                      <EndpointToggle
                        active={true}
                        id={1}
                        onChange={[Function]}
                      />,
                      <withRouter(NotificationActions)
                        endpointId={1}
                        onDelete={[Function]}
                      />,
                    ],
                  },
                  Object {
                    "cells": Array [
                      "TEST Endpoint #2",
                      "http://endpoint2.com",
                      "HTTP",
                      <StatusIcon
                        status={true}
                      />,
                      <EndpointToggle
                        active={true}
                        id={2}
                        onChange={[Function]}
                      />,
                      <withRouter(NotificationActions)
                        endpointId={2}
                        onDelete={[Function]}
                      />,
                    ],
                  },
                  Object {
                    "cells": Array [
                      "TEST Endpoint #3",
                      "http://endpoint3.com",
                      "HTTP",
                      <StatusIcon
                        status={true}
                      />,
                      <EndpointToggle
                        active={false}
                        id={3}
                        onChange={[Function]}
                      />,
                      <withRouter(NotificationActions)
                        endpointId={3}
                        onDelete={[Function]}
                      />,
                    ],
                  },
                ],
                "variant": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "itemsPerPage": 10,
                "numberOfItems": 0,
                "onPerPageSelect": [Function],
                "onSetPage": [Function],
                "page": 1,
                "useNext": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
